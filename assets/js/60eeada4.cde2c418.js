"use strict";(self.webpackChunkrf_website=self.webpackChunkrf_website||[]).push([[7451],{71987:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var n=i(85893),r=i(11151);const t={title:"Staging and Classifying",description:"Making sense of risks faced by software projects.",url:"https://riskfirst.org/risks/Staging-And-Classifying",featured:{class:"bg2",element:"<document>Collection</document>"},sidebar_position:16,tags:["Risks"],redirect_from:["/Staging-And-Classifying"],tweet:"yes"},a="Staging and Classifying",o={id:"risks/Staging-And-Classifying",title:"Staging and Classifying",description:"Making sense of risks faced by software projects.",source:"@site/docs/risks/Staging-And-Classifying.md",sourceDirName:"risks",slug:"/risks/Staging-And-Classifying",permalink:"/risks/Staging-And-Classifying",draft:!1,unlisted:!1,editUrl:"https://github.com/risk-first/website/blob/master/docs/risks/Staging-And-Classifying.md",tags:[{label:"Risks",permalink:"/tags/risks"}],version:"current",sidebarPosition:16,frontMatter:{title:"Staging and Classifying",description:"Making sense of risks faced by software projects.",url:"https://riskfirst.org/risks/Staging-And-Classifying",featured:{class:"bg2",element:"<document>Collection</document>"},sidebar_position:16,tags:["Risks"],redirect_from:["/Staging-And-Classifying"],tweet:"yes"},sidebar:"tutorialSidebar",previous:{title:"Operational Risk",permalink:"/risks/Operational-Risk"},next:{title:"Glossary of Risk Types",permalink:"/risks/Glossary-Of-Risk-Types"}},c={},d=[{value:"Towards A &quot;Periodic Table&quot; Of Risks",id:"towards-a-periodic-table-of-risks",level:2},{value:"The Power Of Abstractions",id:"the-power-of-abstractions",level:2},{value:"Using A Known Abstraction",id:"using-a-known-abstraction",level:3},{value:"Inventing A New Abstraction",id:"inventing-a-new-abstraction",level:3},{value:"Learning A New Abstraction",id:"learning-a-new-abstraction",level:3},{value:"Your Feature Risk is Someone Else&#39;s Dependency Risk",id:"your-feature-risk-is-someone-elses-dependency-risk",level:2},{value:"The Work Continues",id:"the-work-continues",level:2}];function h(e){const s={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"staging-and-classifying",children:"Staging and Classifying"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Staged and Classified Beetle Collection, (Credit: Fir0002, Wikipedia)",src:i(53829).Z+"",width:"800",height:"429"})}),"\n",(0,n.jsx)(s.p,{children:"Our tour is complete."}),"\n",(0,n.jsxs)(s.p,{children:["But if we are good collectors, then before we finish we should ",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Entomological_equipment_for_mounting_and_storage",children:"Stage"})})," our specimens and do some work in classifying what we've seen."]}),"\n",(0,n.jsx)(s.h2,{id:"towards-a-periodic-table-of-risks",children:'Towards A "Periodic Table" Of Risks'}),"\n",(0,n.jsxs)(s.p,{children:["As we said ",(0,n.jsx)(s.a,{href:"/risks/A-Pattern-Language",children:"at the start"}),", Risk-First is all about developing ",(0,n.jsx)(s.em,{children:"A Pattern Language"}),'.  We can use the terms like "',(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"}),'" or "',(0,n.jsx)(s.a,{href:"/risks/Communication-Risk#learning-curve-risk",children:"Learning Curve Risk"}),'" to explain phenomena we see on software projects.   If we want to ',(0,n.jsx)(s.a,{href:"/thinking/De-Risking",children:"De-Risk"})," our work, we need this power of explanation so we can talk about how to go about it."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Periodic Table of Risks, Horizontal",src:i(56403).Z+"",width:"2881",height:"1879"})}),"\n",(0,n.jsxs)(s.p,{children:["The diagram above compiles all of the risks we've seen so far on our tour across the ",(0,n.jsx)(s.a,{href:"/risks/Risk-Landscape",children:"Risk Landscape"}),".  Just like a periodic table, there are perhaps others left to discover.   ",(0,n.jsx)(s.em,{children:"Unlike"})," a periodic table, these risks are not completely distinct: they mix like paint and blend into one another."]}),"\n",(0,n.jsxs)(s.p,{children:["If you've been reading closely, you'll notice that a number of themes come up again and again within the different sections.   It's time to look at the ",(0,n.jsx)(s.em,{children:"patterns within the patterns"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"the-power-of-abstractions",children:"The Power Of Abstractions"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/thinking/Glossary#abstraction",children:"Abstraction"})," appears as a concept continually: in ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk",children:"Communication Risk"}),", ",(0,n.jsx)(s.a,{href:"/risks/Complexity-Risk#kolmogorov-complexity",children:"Complexity Metrics"}),", ",(0,n.jsx)(s.a,{href:"/risks/Map-And-Territory-Risk",children:"Map and Territory Risk"})," or how it causes ",(0,n.jsx)(s.a,{href:"/risks/Boundary-Risk",children:"Boundary Risk"}),".  We've looked at some complicated examples of abstractions, such as ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk#protocols",children:"network protocols"}),", ",(0,n.jsx)(s.a,{href:"/risks/Software-Dependency-Risk",children:"dependencies on technology"})," or ",(0,n.jsx)(s.a,{href:"/risks/Process-Risk#the-purpose-of-process",children:"Business Processes"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Let's now ",(0,n.jsx)(s.em,{children:"generalize"})," what is happening with abstraction.  To do this, we'll consider the simplest example of abstraction:  ",(0,n.jsx)(s.em,{children:"naming a pattern"}),' of behaviour we see in the real world, such as "Binge Watching" or "Remote Working", or naming a category of insects as "Beetles".']}),"\n",(0,n.jsx)(s.h3,{id:"using-a-known-abstraction",children:"Using A Known Abstraction"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Using A Known Abstraction",src:i(3119).Z+"",width:"1158",height:"335"})}),"\n",(0,n.jsxs)(s.p,{children:["As shown in the above diagram, ",(0,n.jsx)(s.em,{children:"using an abstraction you already know"})," means:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Mitigating ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"})]}),": because the abstraction is providing you with something ",(0,n.jsx)(s.em,{children:"useful"}),'.  For example, using the word "London" allows you to refer to a whole (but slightly non-specific) geographic area.']}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Accepting ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk",children:"Communication Risk"})]}),": because if you are using the abstraction in conversation the people you are using it with ",(0,n.jsx)(s.em,{children:"need to understand it too"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Accepting ",(0,n.jsx)(s.a,{href:"/risks/Map-And-Territory-Risk",children:"Map and Territory Risk"})]}),": because the abstraction is a simplification and not the actual thing itself."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Living with ",(0,n.jsx)(s.a,{href:"/risks/Dependency-Risk",children:"Dependency Risks"})]}),":  we depend on a word in our language (or a function in our library, or a service on the Internet).  But words are ",(0,n.jsx)(s.a,{href:"/risks/Dependency-Risk#reliability-risk",children:"unreliable"}),".  Language ",(0,n.jsx)(s.em,{children:"changes"})," and ",(0,n.jsx)(s.em,{children:"evolves"}),", and the words you are using now might not always mean what you want them to mean.  (Software too changes and evolves:  We've seen this in ",(0,n.jsx)(s.a,{href:"/risks/Scarcity-Risk#red-queen-risk",children:"Red Queen Risk"})," and ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk#feature-drift-risk",children:"Feature Drift Risk"}),".)"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"inventing-a-new-abstraction",children:"Inventing A New Abstraction"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Inventing A New Abstraction",src:i(71097).Z+"",width:"1137",height:"335"})}),"\n",(0,n.jsxs)(s.p,{children:["As shown in the above diagram, ",(0,n.jsx)(s.em,{children:"inventing a new abstraction"})," means:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Mitigating ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"}),"."]}),"  By ",(0,n.jsx)(s.em,{children:"giving a name to something"})," (or building a new product, or a way of working) you are offering up something that someone else can use.  This should mitigate ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"})," in the sense that other people can choose to use your it, if it fits their requirements."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Creating a ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk#protocols",children:"Protocol"}),"."]}),"  Introducing ",(0,n.jsx)(s.em,{children:"new words to a language"})," creates ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk#protocol-risk",children:"Protocol Risk"})," as most people won't know what it means."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Increasing ",(0,n.jsx)(s.a,{href:"/risks/Complexity-Risk",children:"Complexity Risk"}),"."]})," Because, the more words we have, the more complex the language is."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Creating the opportunity for ",(0,n.jsx)(s.a,{href:"/risks/Boundary-Risk",children:"Boundary Risk"}),"."]}),"  By naming something, you ",(0,n.jsx)(s.em,{children:"implicitly"}),' create a boundary, because the world is now divided into "things which ',(0,n.jsx)(s.em,{children:"are"}),' X" and "things which ',(0,n.jsx)(s.em,{children:"are not"}),' X".  ',(0,n.jsx)(s.em,{children:"Boundary Risk arises from abstractions."})]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"learning-a-new-abstraction",children:"Learning A New Abstraction"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Learning a New Abstraction",src:i(41006).Z+"",width:"1074",height:"335"})}),"\n",(0,n.jsxs)(s.p,{children:["As shown in the above diagram, ",(0,n.jsx)(s.em,{children:"learning a new abstraction"})," means:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Overcoming a ",(0,n.jsx)(s.a,{href:"/risks/Communication-Risk#learning-curve-risk",children:"Learning Curve"})]}),": because you have to ",(0,n.jsx)(s.em,{children:"learn"})," a name in order to use it (whether it is the name of a function, a dog, or someone at a party)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Accepting ",(0,n.jsx)(s.a,{href:"/risks/Boundary-Risk",children:"Boundary Risks"}),"."]}),"  Commitment to one abstraction over another means that you have the opportunity cost of the other abstractions that you could have used."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["Accepting ",(0,n.jsx)(s.a,{href:"/risks/Map-And-Territory-Risk",children:"Map And Territory Risk"}),"."]})," Because the word refers to the ",(0,n.jsx)(s.em,{children:"concept"})," of the thing, and ",(0,n.jsx)(s.em,{children:"not the thing itself"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Abstraction is everywhere and seems to be at the heart of what our brains do.  But clearly, like ",(0,n.jsx)(s.a,{href:"/thinking/Glossary#taking-action",children:"taking any other action"})," there is always trade-off in terms of risk."]}),"\n",(0,n.jsx)(s.h2,{id:"your-feature-risk-is-someone-elses-dependency-risk",children:"Your Feature Risk is Someone Else's Dependency Risk"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Features And Dependencies",src:i(40764).Z+"",width:"1232",height:"624"})}),"\n",(0,n.jsxs)(s.p,{children:["In the ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"})," section, we looked at the problems of ",(0,n.jsx)(s.em,{children:"supplying something for a client to use as a dependency"}),":  you've got to satisfy a demand (",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk#market-risk",children:"Market Risk"}),") and service a segment of the user community (",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk#feature-access-risk",children:"Feature Access Risk"}),")."]}),"\n",(0,n.jsxs)(s.p,{children:["However over the rest of the ",(0,n.jsx)(s.a,{href:"/risks/Dependency-Risk",children:"Dependency Risk"})," sections we looked at this from the point of view of ",(0,n.jsx)(s.em,{children:"being a client of someone else"}),":  you want to find trustworthy, reliable dependencies that don't give up when you least want them to."]}),"\n",(0,n.jsxs)(s.p,{children:["So ",(0,n.jsx)(s.a,{href:"/risks/Feature-Risk",children:"Feature Risk"})," and ",(0,n.jsx)(s.a,{href:"/risks/Dependency-Risk",children:"Dependency Risk"})," are ",(0,n.jsx)(s.em,{children:"two sides of the same coin"}),", they capture the risks in ",(0,n.jsx)(s.em,{children:"demand"})," and ",(0,n.jsx)(s.em,{children:"supply"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["As shown in the diagram above, relationships of features/dependencies are the basis of ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Supply_chain",children:"Supply Chains"})," and the world-wide network of goods and services that forms the modern economy.  The incredible complexity of this network mean incredible ",(0,n.jsx)(s.a,{href:"/risks/Complexity-Risk",children:"Complexity Risk"}),", too.  Humans are masters at ",(0,n.jsx)(s.a,{href:"/risks/Coordination-Risk",children:"coordinating"})," and managing our dependencies."]}),"\n",(0,n.jsx)(s.h2,{id:"the-work-continues",children:"The Work Continues"}),"\n",(0,n.jsxs)(s.p,{children:["On this journey around the ",(0,n.jsx)(s.a,{href:"/risks/Risk-Landscape",children:"Risk Landscape"})," we've collected a (hopefully) good, representative sample of ",(0,n.jsx)(s.a,{href:"/thinking/Glossary#risk",children:"Risks"})," and where to find them. But there are more out there.   How many of these have you seen on your projects?  What is missing?  What is wrong?"]}),"\n",(0,n.jsx)(s.p,{children:"Please help by reporting back what you find."})]})}function l(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},53829:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/Beetle_collection_short-b4be6df7188453e6b721a67826167dfc.jpg"},41006:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/choosing-abstraction-487874275746a34ab028251366d766e4.png"},3119:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/depending-abstraction-75dfce2ba09924acfacca0ca88c9e73a.png"},40764:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/features-and-dependencies-c820dfad23b6606cdddfe0e70eded71a.png"},71097:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/inventing-abstraction-5f07b136450f53ea2fab7b99f7c210c4.png"},56403:(e,s,i)=>{i.d(s,{Z:()=>n});const n=i.p+"assets/images/periodic-horizontal-c4b681440e3ddebf7a4357035d84d7a5.png"},11151:(e,s,i)=>{i.d(s,{Z:()=>o,a:()=>a});var n=i(67294);const r={},t=n.createContext(r);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);
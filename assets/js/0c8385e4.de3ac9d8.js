"use strict";(self.webpackChunkrf_website=self.webpackChunkrf_website||[]).push([[6160],{13225:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var n=i(85893),s=i(11151);const o={title:"Cadence",description:"How long should feedback loops be?",url:"https://riskfirst.org/thinking/Cadence",featured:{class:"bg3",element:'<image-artifact imgsrc="/public/templates/risk-first/posts/cadence.svg">Feedback Loops</image-artifact>'},tags:["Thinking Risk-First"],sidebar_position:11,redirect_from:["/Cadence"],tweet:"yes"},a="Cadence",r={id:"thinking/Cadence",title:"Cadence",description:"How long should feedback loops be?",source:"@site/docs/thinking/Cadence.md",sourceDirName:"thinking",slug:"/thinking/Cadence",permalink:"/thinking/Cadence",draft:!1,unlisted:!1,editUrl:"https://github.com/risk-first/website/blob/master/docs/thinking/Cadence.md",tags:[{label:"Thinking Risk-First",permalink:"/tags/thinking-risk-first"}],version:"current",sidebarPosition:11,frontMatter:{title:"Cadence",description:"How long should feedback loops be?",url:"https://riskfirst.org/thinking/Cadence",featured:{class:"bg3",element:'<image-artifact imgsrc="/public/templates/risk-first/posts/cadence.svg">Feedback Loops</image-artifact>'},tags:["Thinking Risk-First"],sidebar_position:11,redirect_from:["/Cadence"],tweet:"yes"},sidebar:"tutorialSidebar",previous:{title:"Health",permalink:"/thinking/Health"},next:{title:"De-Risking",permalink:"/thinking/De-Risking"}},l={},d=[{value:"Time / Reality Trade-Off",id:"time--reality-trade-off",level:3},{value:"Development Cycle Time",id:"development-cycle-time",level:3},{value:"Production",id:"production",level:3}];function h(e){const t={a:"a",em:"em",h1:"h1",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"cadence",children:"Cadence"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Multiple Feedback Loops",src:i(39583).Z+"",width:"1204",height:"675"})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to run a successful dinner party, you have to address all the risks of it ",(0,n.jsx)(t.em,{children:"not"})," being successful.  For example:  having the right food, inviting the right people, serving the right drinks, and so on."]}),"\n",(0,n.jsx)(t.p,{children:"On the run-up to the party, as you solve problems, new, previously-hidden ones come to light."}),"\n",(0,n.jsx)(t.p,{children:"Congratulations, you're in a feedback loop."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Meeting Reality: reality is changed and so is your internal model.",src:i(58295).Z+"",width:"1308",height:"472"})}),"\n",(0,n.jsxs)(t.p,{children:["As you can see in the diagram above, it's a ",(0,n.jsx)(t.strong,{children:"Feedback Loop"}),".   How ",(0,n.jsx)(t.em,{children:"fast"})," should we go round this loop?  The longer you procrastinate, the longer it'll be before you find out how your model of the risks you face really stacks up against reality."]}),"\n",(0,n.jsx)(t.p,{children:"In a software development scenario, you should also test your model against reality early and safely.  To do this, you likely need to set up multiple feedback loops, like:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Bug Reports and Feature Requests"})," tell you how the users are getting on with the software."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/risks/Operational-Risk",children:"Monitoring Tools and Logs"})})," allow you to find out how your software is doing in reality."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Dog-Fooding"})," i.e using the software you write yourself might be faster than talking to users."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Continuous_delivery",children:"Continuous Delivery"})})," is about putting software into production as soon as it's written."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Integration Testing"})," is a faster way of meeting ",(0,n.jsx)(t.em,{children:"some"})," reality than continually deploying code and re-testing it manually."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Unit Testing"})," is a faster feedback loop than Integration Testing."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Compilation"})," warns you about logical inconsistencies in your code."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:".. and so on."}),"\n",(0,n.jsx)(t.h3,{id:"time--reality-trade-off",children:"Time / Reality Trade-Off"}),"\n",(0,n.jsxs)(t.p,{children:["This list is arranged so that at the top, we have the most visceral, most ",(0,n.jsx)(t.em,{children:"real"})," feedback loop, but at the same time, the slowest."]}),"\n",(0,n.jsxs)(t.p,{children:["At the bottom, a good IDE can inform you about errors in your ",(0,n.jsx)(t.a,{href:"/thinking/Glossary#Internal-Model",children:"Internal Model"})," in real time, by way of highlighting compilation errors .  So, this is the fastest loop, but it's the most ",(0,n.jsx)(t.em,{children:"limited"})," reality."]}),"\n",(0,n.jsx)(t.p,{children:"Imagine for a second that you had a special time-travelling machine.  With it, you could make a change to your software, and get back a report from the future listing out all the issues people had faced using it over its lifetime, instantly."}),"\n",(0,n.jsx)(t.p,{children:"That'd be neat, eh?  If you did have this, would there be any point at all in a compiler?   Probably not, right?"}),"\n",(0,n.jsxs)(t.p,{children:["The whole ",(0,n.jsx)(t.em,{children:"reason"})," we have tools like compilers is because they give us a short-cut way to get some limited experience of reality ",(0,n.jsx)(t.em,{children:"faster"})," than would otherwise be possible.  Because cadence is really important:  the faster we test our ideas, the more quickly we'll find out if they're correct or not."]}),"\n",(0,n.jsx)(t.h3,{id:"development-cycle-time",children:"Development Cycle Time"}),"\n",(0,n.jsxs)(t.p,{children:["Developers often ignore the fast feedback loops at the bottom of the list above because the ones nearer the top ",(0,n.jsx)(t.em,{children:"will do"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"In the worst cases this means changing two lines of code, running the build script, deploying and then manually testing out a feature.  And then repeating.  Doing this over and over is a terrible waste of time because the feedback loop is so long and you get none of the benefit of a permanent suite of tests to run again in the future."}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"http://www.agilenutshell.com/episodes/41-testing-pyramid",children:"Testing Pyramid"})," hints at this truth:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Unit Tests"})," have a ",(0,n.jsx)(t.em,{children:"fast feedback loop"}),", so have ",(0,n.jsx)(t.em,{children:"lots of them"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Integration Tests"})," have a slightly ",(0,n.jsx)(t.em,{children:"slower feedback loop"}),", so have ",(0,n.jsx)(t.em,{children:"few of them"}),".   Use them when you can't write unit tests (at the application boundaries)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Manual Tests"})," have a ",(0,n.jsx)(t.em,{children:"very slow feedback loop"}),", so have ",(0,n.jsx)(t.em,{children:"even fewer of them"}),".  Use them as a last resort.  But note - they are essential."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"The Testing Pyramid",src:i(3159).Z+"",width:"680",height:"284"})}),"\n",(0,n.jsx)(t.h3,{id:"production",children:"Production"}),"\n",(0,n.jsxs)(t.p,{children:["You could take this section to mean that ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Continuous_delivery",children:"Continuous Delivery"})," (CD) is always and everywhere a good idea.  That's not a bad take-away, but it's clearly more nuanced than that."]}),"\n",(0,n.jsx)(t.p,{children:"Yes, CD will give you faster feedback loops, but even getting things into production is not the whole story:   the feedback loop isn't complete until people have used the code, and reported back to the development team."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Different actions have different feedback loops",src:i(84757).Z+"",width:"1200",height:"694"})}),"\n",(0,n.jsx)(t.p,{children:"The right answer is to use multiple feedback loops, as shown in the diagram above."}),"\n",(0,n.jsxs)(t.p,{children:["In the next section ",(0,n.jsx)(t.a,{href:"/thinking/De-Risking",children:"De-Risking"})," we're going to introduce a few more useful terms for thinking about risk."]})]})}function c(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},84757:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/cadence-58fbf276625da2f9f3a94778c95d8329.png"},58295:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/model_vs_reality_2-3b2f45efc07ddf755ec694a52f4f3b64.png"},3159:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/testing_pyramid-988c7aa9a276662f053b54805ef23691.png"},39583:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/feedback-loops-b0d15464f9807f5fd0788ab8aaf54c91.png"},11151:(e,t,i)=>{i.d(t,{Z:()=>r,a:()=>a});var n=i(67294);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);